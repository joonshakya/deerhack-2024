generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                   @id @default(cuid())
  fullName              String
  email                 String                   @unique
  password              String
  phone                 String                   @unique
  type                  UserTypeChoice           @default(CUSTOMER)
  about                 String?
  disabledNotifications NotificationTypeChoice[] @default([])
  noOfPasswordsChanged  Int                      @default(0)
  messages              Message[]
  chats                 Chat[]
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
  notifications         Notification[]
  notificationIds       String[]                 @default([])
  events                Event[]                  @relation("EventLead")
  volunteerEvents       EventOrganizer[]         @relation("EventOrganizerUser")
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String
  category    Category
  image       String
  date        DateTime
  time        String
  venue       String

  paymentScreenshotNeeded  Boolean
  registrationRequirements String[]
  formResponses            Response[] @relation("FormResponse")

  tracks Track[] @relation("EventTrack")

  registrationPrice Float
  lead              User             @relation("EventLead", fields: [leadId], references: [id], onDelete: Cascade)
  leadId            String
  organizers        EventOrganizer[] @relation("EventOrganizerEvent")
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model Response {
  id        String           @id @default(uuid())
  fullName  String
  email     String
  phone     String
  extraInfo Json
  event     Event            @relation("FormResponse", fields: [eventId], references: [id], onDelete: Cascade)
  eventId   String
  remarks   String?
  tracks    TrackingDetail[] @relation("TrackResponse")
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model EventOrganizer {
  id        String             @id @default(cuid())
  event     Event              @relation("EventOrganizerEvent", fields: [eventId], references: [id], onDelete: Cascade)
  eventId   String
  role      EventOrganizerRole
  remarks   String?
  user      User               @relation("EventOrganizerUser", fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model Track {
  id              String           @id @default(cuid())
  title           String
  description     String
  event           Event            @relation("EventTrack", fields: [eventId], references: [id], onDelete: Cascade)
  eventId         String
  trackingDetails TrackingDetail[] @relation("TrackDetail")
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model TrackingDetail {
  id String @id @default(cuid())

  track   Track  @relation("TrackDetail", fields: [trackId], references: [id], onDelete: Cascade)
  trackId String

  response   Response @relation("TrackResponse", fields: [responseId], references: [id], onDelete: Cascade)
  responseId String

  scannedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chat {
  id           String    @id @default(cuid())
  messages     Message[]
  read         Boolean   @default(false)
  closed       Boolean   @default(false)
  participants User[]
  createdAt    DateTime  @default(now())
}

model Message {
  id        String   @id @default(cuid())
  text      String
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  createdAt DateTime @default(now())
}

model Notification {
  id        String                      @id @default(cuid())
  title     String
  body      String
  dataId    String?
  dataType  NotificationDataTypeChoice?
  type      NotificationTypeChoice
  read      Boolean                     @default(false)
  user      User                        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime                    @default(now())
  updatedAt DateTime                    @updatedAt
}

enum NotificationDataTypeChoice {
  USER
}

enum NotificationTypeChoice {
  USER_CREATED
}

enum UserTypeChoice {
  ADMIN
  CUSTOMER
}

enum Category {
  MUSIC
  HACKATHON
  COMMUNITY
  SPORTS
  EDUCATION
}

enum EventOrganizerRole {
  LOGISTICS
  MARKETING
  SPONSORSHIP
  TECHNICAL
}

enum DayChoice {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}
